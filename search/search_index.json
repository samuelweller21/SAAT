{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SAAT","text":"<p>SAAT (Simulated Annealing Allocation Tool) is a tool intended to optimise the allocation of individuals into groups across teams within an organisation.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>Suppose we have some employees who want to learn more about their organisation.  Some know about HR, some finance, some marketing and others logistics.  The CEO decides the best way to do this is to put them into groups and get them to talk to one another.  Each employee has their specialism and diary as below: </p> Employee Specialism 1pm 2pm 3pm Dave Finance Busy - - Janette Logistics - Busy Busy John HR - Busy - ... ... ... <p>Ideally, the groups would have a good mix of specialisms, all be about the same size and have as many time slots in which the group can meet.  For large numbers, it's not trivial how to best allocate employees into groups; this is the problem which SAAT approaches.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code># Initialise SAAT\nmy_SAAT = SAAT.SAAT(\n    times = data.loc[:,'1-2pm':'5-6pm3'], \n    group_size = 4, \n    organise = data[\"Setup\"], \n    department = data[\"Department\"], \n    time_in_company = data[\"Years_In_Org\"])\n\nmy_SAAT.set_schedule(my_SAAT.auto(minutes=0.1, steps=200))\n\n#Run\n# random.seed(1)\nstate, e = my_SAAT.anneal()\n\nprint('Energy maximised at: {}'.format(-e))\nprint('Final state: {}'.format(state))\n</code></pre> <p>See Tutorial section for more information or Demo for a notebook example.</p>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>This package is built on https://github.com/perrygeo/simanneal.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#library","title":"Library","text":"<pre><code>pip install saat\n</code></pre>"},{"location":"installation/#jupyter-demos","title":"Jupyter Demos","text":"<pre><code>git clone https://github.com/samuelweller21/SAAT.git\n\n# Intall [poetry](https://python-poetry.org/docs/#installing-with-the-official-installer)\npoetry shell\npoetry install\n\n# Jupyter\npython3 -m ipykernel install --user --name=\"SAAT\" --display-name=\"SAAT\"\n</code></pre>"},{"location":"installation/#run-tests","title":"Run tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"paper/","title":"Paper","text":"<p>See a paper with some additional details of how SAAT works here.</p>"},{"location":"tutorial/annealing/","title":"Annealing","text":"<p>Next we need to set up the annealer.  For reference the annealing takes:</p> <pre><code>def __init__(self, \n     times, \n     group_size, \n     times_wt = 1, \n     organise_wt = 0.5, \n     time_in_company_wt = 0.5,\n     department_wt = 0.25,\n     no_time_penalty_wt = 0.5,\n     organise = None, \n     department = None, \n     time_in_company = None, \n     g = None):\n</code></pre> <p>We can now simply pass to SAAT from our dataframe in Data:</p> <pre><code>my_SAAT = SAAT.SAAT(\n    times = data.loc[:,'1-2pm':'5-6pm3'], \n    group_size = 4, \n    organise = data[\"Setup\"], \n    department = data[\"Department\"], \n    time_in_company = data[\"Years_In_Org\"])\n</code></pre> <p> For more details on tuning the default weights see Weights. </p> <p>Next we need to tune all the simulated annealing parameters.  The underlying simulated annealing framework of SAAT (SimAnneal) provides a hueristic which will do all the hard work for us.  All we need to specify is:</p> <ul> <li>steps: how many iterations it should spend tuning the parameters, default is 2,000</li> <li>minutes: how many minutes we want it to spend looking for a solution</li> </ul> <pre><code>my_SAAT.set_schedule(my_SAAT.auto(minutes=0.1, steps=200))\n</code></pre> <p> Testing tended to suggest conversion on a good minimum within 200 steps and just a couple of seconds for small group problems. </p> <p>Now run anneal which will return the optimal state and energy found:</p> <pre><code># random.seed(1)\nstate, e = my_SAAT.anneal()\n</code></pre> <p>You'll see the SimAnneal process logging as it runs.  Note, if you want reproducible results then you can simply set Python's random.seed.  Also note, g is the function which decides the group sizes to allocate, see the Paper for more details.</p>"},{"location":"tutorial/data/","title":"Data","text":"<p>Here's an example of the structure of data SAAT expects:</p> Name Email Years_In_Org Grade Setup Topic 1-2pm 2-3pm 3-4pm 4-5pm 5-6pm 1-2pm2 2-3pm2 3-4pm2 4-5pm2 5-6pm2 1-2pm 2-3pm3 3-4pm3 4-5pm3 5-6pm3 Person1 Person1@DepartmentG.com &lt;1 year Level1 If needed Topic1 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 Person2 Person2@DepartmentN.com 3-5 years Level2 Yes Topic2 1 1 0 0 0 1 1 1 0 0 1 1 1 0 0 Person3 Person3@DepartmentK.com 1-3 years Level2 Yes Topic2 0 0 1 1 0 1 1 1 0 0 0 1 1 0 0 Person4 Person4@DepartmentN.com 5-10 years Level3 Yes Topic3 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 Person5 Person5@DepartmentL.com 5-10 years Level3 No Topic3 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 <p>Fields:</p> <ul> <li>Name <code>&lt;str&gt;</code>: The name of the person (not necessary for SAAT)</li> <li>Email <code>&lt;str&gt;</code>: The email of the person for contact (not necessary for SAAT)</li> <li>Years_In_Org <code>&lt;str/int&gt;</code>: The number of years the person has spent in the organisation (optional)</li> <li>Grade <code>&lt;str/int&gt;</code>: The level of the individual in the organisation e.g. Manager, Director, etc (optional)</li> <li>Setup <code>&lt;str&gt;</code> {'Yes', 'No', 'If needed'}: Will the person facilitate setting up a meeting (optional)</li> <li>Topic <code>&lt;str&gt;</code>: The topic the person wants to discuss (not necessary for SAAT)</li> <li>Times e.g. 1-2pm <code>&lt;int&gt;</code> {0,1}: Can the person attend at the time specified (essential)</li> </ul> <p>You can download this data on github.</p>"},{"location":"tutorial/results/","title":"Results","text":"<p>SAAT provides some utility functions to help processing and QA of results.  Firstly we can inspect the raw state SAAT found and it's energy:</p> <pre><code>print('Allocation: ' + str(state))\nprint('Energy maximised at: ' + str(-e))\n</code></pre> <pre><code>Allocation: [5, 19, 17, 7, 10, 22, 9, 16, 20, 11, 1, 13, 4, 12, 21, 18, 6, 8, 14, 15, 2, 23, 3]\nEnergy maximised at: 7.737247474747475\n</code></pre> <p> Note, energy: e, is a negative number which SimAnneal minimises (this is equivalent to maximising -e) </p> <p>It also has a function for printing a pretty version of the final allocation.  </p> <pre><code>utils.print_pretty_allocations(\n    state = state, \n    times = data.loc[:,'1-2pm':'5-6pm3'], \n    group_size = 4,\n    extras = data.iloc[:,2:6])\n</code></pre> <p></p> <p>Lastly, it can print the results to csv to be opened in Excel and easily shared:</p> <pre><code>utils.results_to_csv(\n    state = state,\n    data = data,\n    group_size = 4,\n    name='results/Topic_1_Allocation.csv')\n</code></pre>"},{"location":"tutorial/setup/","title":"Setup","text":"<p>We'll use the following imports for all code extracts:</p> <pre><code># Imports\nimport pandas as pd\nimport lib.SAAT as SAAT\nimport lib.utils as utils\n</code></pre> <p>First we read in the data:</p> <pre><code># Read &amp; Clean\ndata = pd.read_csv(\"data/example_data.csv\")\n</code></pre> <p>Then we extract each persons department from their email: </p> <pre><code># Get department from email\ndata[\"Department\"] = data[\"Email\"].map(lambda email: utils.email_to_department(email))\n</code></pre> <p>(this is only appropriate if your organisation follows the person@department.organisation.com email format, otherwise you'll probably already have a department field) </p> <p>And select only those who are going to discuss 'Topic1':</p> <pre><code>data = data[data['Topic'] == 'Topic1']\ndata.head()\n</code></pre> Name Email Years_In_Org Grade Setup Topic 1-2pm ... 5-6pm3 Department Person1 Person1@DepartmentG.com &lt;1 year Level1 If needed Topic1 0 ... 1 departmentg Person10 Person10@DepartmentF.com 1-3 years Level2 If needed Topic1 1 ... 0 departmentf Person12 Person12@DepartmentH.com 5-10 years Level2 Yes Topic1 0 ... 0 departmenth Person16 Person16@DepartmentL.com 1-3 years Level2 If needed Topic1 0 ... 0 departmentl Person17 Person17@DepartmentG.com &gt;10 years Level2 No Topic1 1 ... 0 departmentg <p>Note, your setup is likely to look somewhat different to this depending on your data format.</p>"},{"location":"tutorial/weights/","title":"Weights","text":"<p>The suggested method of using SAAT is with <code>my_SAAT.set_schedule(my_SAAT.auto(minutes=0.1, steps=200))</code> along with the default weights in <code>`__init__</code>.</p> <p>If, however, you need greater performance the first thing to try is increasing the annealing time e.g. to:</p> <p><code>my_SAAT.set_schedule(my_SAAT.auto(minutes=1, steps=2000))</code></p> <p>If this doesn't yield better results it's unlikely longer anneal times will perform better.  Instead you may need to identify the nature of the algorithm's poor performance.  (Note, if you are getting groups without any free slots first consider if it's possible to allocate such a group).</p> <p>SAAT uses a system where all weights are between 0 and 1.  The defaults are:</p> <pre><code>times_wt = 1\norganise_wt = 0.5\ntime_in_company_wt = 0.5\ndepartment_wt = 0.25\nno_time_penalty_wt = 0.5\n</code></pre> <p>If you want a better mix of departments then maybe try incrasing department_wt to 0.75.  Alternatively, if you want to further avoid groups being allocated with no free slots increase the no_time_penalty_wt to 0.8  </p> <p> Note, technically weights &gt; 1 can be used but keeping all weights [0,1] mkes things most intuitive </p>"}]}